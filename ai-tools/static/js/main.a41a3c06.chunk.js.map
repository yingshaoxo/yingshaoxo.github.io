{"version":3,"sources":["NavigationBlock.js","App.js","serviceWorker.js","index.js"],"names":["ExpansionPanels","state","expanded","data","_this","props","handle_change","expand_or_not","setState","generate_panels","all","index","push","react_default","a","createElement","ExpansionPanel_default","onChange","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","NavigationBlock_Tooltips","elements","this","Component","Tooltips","_Component2","_getPrototypeOf3","_this2","Object","classCallCheck","_len2","arguments","length","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handle_click","url","window","open","generate_elements","Tooltip_default","title","Button_default","onClick","style","textTransform","inherits","createClass","key","value","Navigation","_Component3","_this3","category","description","NavigationBlock_ExpansionPanels","App","display","justifyContent","alignItems","flexDirection","width","height","NavigationBlock","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a41a3c06.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n});\n\nclass ExpansionPanels extends Component {\n    state = {\n        expanded: true,\n        data: this.props.data,\n    };\n\n    handle_change = () => {\n        var expand_or_not = false;\n        if (this.state.expanded) {\n            expand_or_not = false;\n        } else {\n            expand_or_not = true;\n        }\n        this.setState({\n            expanded: expand_or_not,\n        })\n    }\n\n    generate_panels = () => {\n        const { data } = this.state\n\n        let all = []\n        for (var index in data) {\n            all.push(\n                <ExpansionPanel\n                    expanded={this.state.expanded}\n                    onChange={ () => {\n                        this.handle_change()\n                    }}\n                >\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography>{data[index]['category']}</Typography>\n                    </ExpansionPanelSummary>\n                    \n                    <ExpansionPanelDetails>\n                        <Tooltips\n                            elements={data[index]['elements']}\n                        ></Tooltips>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            )\n        }\n        return all\n    }\n\n    render() {\n        return (\n            <div>\n                {this.generate_panels()}\n            </div>\n        );\n    }\n}\n\nexport class Tooltips extends Component {\n    state = {\n        elements: this.props.elements\n    }\n\n    handle_click = (url) => {\n        window.open(url, \"_blank\")\n    }\n\n    generate_elements = () => {\n        const { elements } = this.state\n\n        let all = []\n        for (var index in elements) {\n            all.push(\n                <Tooltip title={elements[index]['description']}>\n                    <Button\n                        onClick={ () => {\n                            this.handle_click(elements[index]['url'])\n                        } }\n                        style={{\n                            textTransform: 'none'\n                        }}\n                    >\n                        {elements[index]['title']}\n                    </Button>\n                </Tooltip>\n            )\n        }\n\n        return all\n    }\n\n    render() {\n        return (\n            <div>\n                {this.generate_elements()}\n            </div>\n        );\n    }\n}\n\nexport class Navigation extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            //data: this.props.data,\n            data: [\n                {\n                    category: 'Image',\n                    elements: [\n                        {\n                            title: 'AutoDraw',\n                            url: 'https://www.autodraw.com/',\n                            description: 'automate drawing',\n                        },\n                        {\n                            title: 'waifu2x',\n                            url: 'http://waifu2x.udp.jp/index.html',\n                            description: 'Help you scale up your image',\n                        },\n                    ],\n                },\n\n                {\n                    category: 'Video',\n                    elements: [\n                        {\n                            title: 'Deep fake',\n                            url: 'https://github.com/deepfakes/faceswap',\n                            description: 'Change face in video',\n                        },\n                    ],\n                },\n\n            ],\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <ExpansionPanels\n                    data = {this.state.data}\n                ></ExpansionPanels>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport Navigation from './NavigationBlock'\n\nclass App extends Component {\n  render() {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: \"row\",\n                width: '100vw',\n                height: '100vh',\n            }}\n        >\n            <Navigation></Navigation>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}