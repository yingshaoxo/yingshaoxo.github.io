{"version":3,"sources":["NavigationBlock.js","App.js","serviceWorker.js","index.js"],"names":["Panels","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","react_default","a","createElement","es","style","minWidth","data","all","index","push","label","footer","defaultExpanded","map","item","position","delay","flat","textTransform","onClick","window","open","generate_panels","Component","Navigation","_Component2","_this","state","category","elements","title","url","description","NavigationBlock_Panels","App","display","justifyContent","alignItems","flexDirection","width","height","NavigationBlock","Boolean","location","hostname","match","WebFontLoader","load","google","families","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPA8CaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KACVH,IAFd,OAAAC,OAAAM,EAAA,EAAAN,CAAAH,EAAAC,GAAAE,OAAAO,EAAA,EAAAP,CAAAH,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAMQ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,MAAO,CACHC,SAAU,SAzBN,SAACC,GACrB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAASF,EACdC,EAAIE,KACAT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIO,MAAOJ,EAAKE,GAAL,SACPG,OAAQ,KACRC,iBAAe,GAEIN,EAAKE,GAAL,SA9BfK,IAAI,SAAAC,GAChB,OACId,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIO,MAAOI,EAAI,YACXC,SAAS,MACTC,MAAO,KAEPhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIc,MAAI,EACJb,MAAO,CACHc,cAAe,QAEnBC,QAAS,WACLC,OAAOC,KAAKP,EAAI,IAAS,YAE/BA,EAAI,YAmBlB,OAAOP,EAeMe,CAAgB9B,KAAKH,MAAMiB,WAZ5CnB,EAAA,CAA4BoC,aA2EbC,EAzDf,SAAAC,GACI,SAAAD,EAAYnC,GAAO,IAAAqC,EAAA,OAAApC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACfE,EAAApC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMH,KACDsC,MAAQ,CAETrB,KAAM,CACF,CACIsB,SAAU,QACVC,SAAU,CACN,CACIC,MAAO,WACPC,IAAK,4BACLC,YAAa,oBAEjB,CACIF,MAAO,UACPC,IAAK,mCACLC,YAAa,kCAIzB,CACIJ,SAAU,QACVC,SAAU,CACN,CACIC,MAAO,eACPC,IAAK,2DACLC,YAAa,mCAIzB,CACIJ,SAAU,QACVC,SAAU,CACN,CACIC,MAAO,YACPC,IAAK,wCACLC,YAAa,4BApClBN,EADvB,OAAApC,OAAAM,EAAA,EAAAN,CAAAkC,EAAAC,GAAAnC,OAAAO,EAAA,EAAAP,CAAAkC,EAAA,EAAA1B,IAAA,SAAAC,MAAA,WA+CQ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+B,EAAD,CACI3B,KAAQd,KAAKmC,MAAMrB,YAlDvCkB,EAAA,CAAgCD,aC1CjBW,mLAjBX,OACIlC,EAAAC,EAAAC,cAAA,OACIE,MAAO,CACH+B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,MACfC,MAAO,QACPC,OAAQ,UAGZxC,EAAAC,EAAAC,cAACuC,EAAD,cAbMlB,aCSEmB,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,8ECVNC,EAAcC,KAAK,CACjBC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,qBAIzCC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25613a51.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { ExpansionList, ExpansionPanel } from 'react-md';\n\nimport { Tooltipped } from 'react-md';\n\nimport { Button } from 'react-md';\n\nconst generate_elements = (elements) => {\n    return elements.map(item => {\n        return(\n            <Tooltipped\n                label={item['description']}\n                position=\"top\"\n                delay={500}\n            >\n                <Button \n                    flat\n                    style={{\n                        textTransform: 'none'\n                    }}\n                    onClick={() => {\n                        window.open(item['url'], \"_blank\")\n                    }}\n                >{item['title']}</Button>\n            </Tooltipped>\n        )\n    })\n}\n\nconst generate_panels = (data) => {\n    let all = []\n    for (var index in data) {\n        all.push(\n            <ExpansionPanel \n                label={data[index]['category']} \n                footer={null} \n                defaultExpanded\n            >\n                {generate_elements(data[index]['elements'])}\n            </ExpansionPanel>\n        )\n    }\n    return all\n}\n\nexport class Panels extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <ExpansionList\n                style={{\n                    minWidth: \"70vw\",\n                }}\n            >\n                {generate_panels(this.props.data)}\n            </ExpansionList>\n        );\n    }\n}\n\nexport class Navigation extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            //data: this.props.data,\n            data: [\n                {\n                    category: 'Image',\n                    elements: [\n                        {\n                            title: 'AutoDraw',\n                            url: 'https://www.autodraw.com/',\n                            description: 'automate drawing',\n                        },\n                        {\n                            title: 'waifu2x',\n                            url: 'http://waifu2x.udp.jp/index.html',\n                            description: 'Help you scale up your image',\n                        },\n                    ],\n                },\n                {\n                    category: 'Music',\n                    elements: [\n                        {\n                            title: 'Beat Blender',\n                            url: 'https://experiments.withgoogle.com/ai/beat-blender/view/',\n                            description: 'Dynamically create drum music',\n                        },\n                    ],\n                },\n                {\n                    category: 'Video',\n                    elements: [\n                        {\n                            title: 'Deep fake',\n                            url: 'https://github.com/deepfakes/faceswap',\n                            description: 'Change face in video',\n                        },\n                    ],\n                },\n\n            ],\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Panels\n                    data = {this.state.data}\n                ></Panels>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport Navigation from './NavigationBlock'\n\nclass App extends Component {\n  render() {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: \"row\",\n                width: '100vw',\n                height: '100vh',\n            }}\n        >\n            <Navigation></Navigation>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport WebFontLoader from 'webfontloader';\n\nWebFontLoader.load({\n  google: {\n    families: ['Roboto:300,400,500,700', 'Material Icons'],\n  },\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}